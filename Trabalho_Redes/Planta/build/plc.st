TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK



FUNCTION_BLOCK python_eval
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(0, data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_poll
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(1,(PYTHON_EVAL*)(void*)data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_gear
  VAR_INPUT
    N : UINT;
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    py_eval : python_eval;
    COUNTER : UINT;
    ADD10_OUT : UINT;
    EQ13_OUT : BOOL;
    SEL15_OUT : UINT;
    AND7_OUT : BOOL;
  END_VAR

  ADD10_OUT := ADD(COUNTER, 1);
  EQ13_OUT := EQ(N, ADD10_OUT);
  SEL15_OUT := SEL(EQ13_OUT, ADD10_OUT, 0);
  COUNTER := SEL15_OUT;
  AND7_OUT := AND(EQ13_OUT, TRIG);
  py_eval(TRIG := AND7_OUT, CODE := CODE);
  ACK := py_eval.ACK;
  RESULT := py_eval.RESULT;
END_FUNCTION_BLOCK


PROGRAM Planta
  VAR
    PID0 : PID;
  END_VAR
  VAR
    Setpoint : INT;
    EN_PID : BOOL;
    KP : INT;
    TR : INT;
    TD : INT;
    VP : INT;
    SC : INT;
    QUO : INT;
  END_VAR
  VAR
    INT_TO_REAL16_OUT : REAL;
    MAX17_OUT : REAL;
    INT_TO_REAL5_OUT : REAL;
    INT_TO_REAL7_OUT : REAL;
    DIV25_OUT : REAL;
    INT_TO_REAL6_OUT : REAL;
    DIV14_OUT : REAL;
    INT_TO_REAL8_OUT : REAL;
    DIV10_OUT : REAL;
    REAL_TO_INT29_OUT : INT;
    MAX28_OUT : INT;
  END_VAR

  INT_TO_REAL16_OUT := INT_TO_REAL(VP);
  MAX17_OUT := MAX(INT_TO_REAL16_OUT, 0.0);
  INT_TO_REAL5_OUT := INT_TO_REAL(Setpoint);
  INT_TO_REAL7_OUT := INT_TO_REAL(KP);
  DIV25_OUT := DIV(INT_TO_REAL7_OUT, 1000.0);
  INT_TO_REAL6_OUT := INT_TO_REAL(TR);
  DIV14_OUT := DIV(INT_TO_REAL6_OUT, 1000.0);
  INT_TO_REAL8_OUT := INT_TO_REAL(TD);
  DIV10_OUT := DIV(INT_TO_REAL8_OUT, 1000.0);
  PID0(AUTO := EN_PID, PV := MAX17_OUT, SP := INT_TO_REAL5_OUT, KP := DIV25_OUT, TR := DIV14_OUT, TD := DIV10_OUT, CYCLE := T#10ms);
  REAL_TO_INT29_OUT := REAL_TO_INT(PID0.XOUT);
  MAX28_OUT := MAX(REAL_TO_INT29_OUT, 0);
  SC := MAX28_OUT;
END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : Planta;
  END_RESOURCE
END_CONFIGURATION
